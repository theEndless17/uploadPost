{"version":3,"sources":["posts.js"],"names":["_mongoose","_interopRequireDefault","require","_db","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","default","dislikes","likedBy","dislikedBy","comments","comment","model","res","setHeader","handler","req","method","status","end","connectToDatabase","Post","find","sort","posts","json","error","_context","t0"],"mappings":"4FAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,IAAAD,QAAA,uFAGA,IAAME,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OACTC,UAAWC,KANfC,SAAAH,OAQII,UAAWJ,OAPfK,MAAA,CAAAC,KAAAC,OAAAC,QAAA,GASIC,SAAU,CAAEH,KAAMC,OAAQC,QAAS,GACnCE,QAAS,CAACV,QACVW,WAAY,CAACX,QAXgCY,SAAA,CAAA,CAAAT,SAAAH,OAAAa,QAAAb,OAAAC,UAAAC,SAK7CD,KAAWC,UAAAA,QAFwBY,MAAA,OAAAlB,YAKnCS,eAAO,SAAAU,GAAgBA,EAAAC,UAAS,8BAAA,KALGD,EAAAC,UAAA,+BAAA,oBAMnCP,EAAAA,UAAU,+BAAA,iBACAT,SAPyBiB,QAAAC,EAAAH,GAOzBf,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GACVW,eAAaX,GACF,YAAEG,EAAQgB,OAFXnB,OAAAA,EAAAA,OAAAA,SAE8BA,EAA7BoB,OAAA,KAAAC,OAFDrB,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GA2BS,QAAfkB,EAAIC,OA3BEnB,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,OA6BI,EAAAL,IAAA2B,sBA7BJtB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAUVuB,KAAAC,OAAAC,KAAA,CAAAxB,WAAA,KAVUD,KAAAA,EAUV0B,EAVU1B,EAAAA,KAWNgB,EAAUI,OAAA,KAAAO,KAAAD,GAXJ1B,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAYNgB,QAAUY,MAAA,0BAAVZ,EAAAA,IAwBID,EAAIK,OAAO,KAAKO,KAAK,CAAE5B,QAAS,yBAA0B6B,MAAKC,EAAAC,KApC7D9B,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAwCNe,EAAIK,OAAO,KAAKO,KAAK,CAAE5B,QAAS,uBAxC1BC,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA","file":"posts.min.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Set CORS headers\r\nconst setCorsHeaders = (res) => {\r\n    // You can replace this with a specific origin URL if necessary\r\n    res.setHeader('Access-Control-Allow-Origin', '*');  // Allow all origins\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');  // Allow specific methods\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Allow specific headers\r\n};\r\n\r\n// Serverless API handler for getting posts\r\nexport default async function handler(req, res) {\r\n    // Set CORS headers before processing the request\r\n    setCorsHeaders(res);\r\n\r\n    // Handle pre-flight OPTIONS request\r\n    if (req.method === 'OPTIONS') {\r\n        return res.status(200).end(); // Respond with a 200 OK for OPTIONS pre-flight\r\n    }\r\n\r\n    // Handle GET requests to fetch posts\r\n    if (req.method === 'GET') {\r\n        try {\r\n            await connectToDatabase(); // Connect to MongoDB\r\n\r\n            // Fetch posts from the database, sorted by the timestamp in descending order\r\n            const posts = await Post.find().sort({ timestamp: -1 });\r\n            res.status(200).json(posts); // Send posts as a JSON response\r\n        } catch (error) {\r\n            console.error(\"Error retrieving posts:\", error);\r\n            res.status(500).json({ message: 'Error retrieving posts', error }); // Handle any errors\r\n        }\r\n    } else {\r\n        // If the request is not a GET request, respond with 405 Method Not Allowed\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}