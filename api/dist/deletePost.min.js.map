{"version":3,"sources":["deletePost.js"],"names":["_mongoose","_interopRequireDefault","require","_db","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","req","res","method","setCorsHeaders","status","end","connectToDatabase","handler","body","postId","json","findById","post","deleteOne","console","error","_context","t0"],"mappings":"4FAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,IAAAD,QAAA,uFAGA,IAAME,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OACTC,UAAWC,KANfC,SAAAH,OAQII,UAAWJ,SAITK,KAAOR,UAAAA,QAASS,MAAM,OAAQV,YAR9BA,eAAiBC,SAAAA,GACnBE,EAAAA,UADmC,8BAAA,KAEnCE,EAAAA,UAFmC,+BAAA,mCAGnCE,EAAAA,UAHmC,+BAAA,iBAQ1BN,SAAAA,QAAeU,EAAAC,GAAfX,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GAYU,YAAfU,EAAIE,OAZCZ,OAGPa,eAAiBF,GAHVX,EAAAA,OAAAA,SAITW,EAAcG,OAAA,KAAAC,OAJLf,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAMTW,eAAcA,GANLX,EAAAA,KAAAA,EAAAA,mBAAAA,OAoBH,EAAAF,IAAAkB,sBApBGhB,KAAAA,EAAAA,GAU8BW,WAA5BD,EAAeO,OAVjBjB,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,GAAAA,EAAAA,KAAAA,EAAAA,EAwBuCU,EAAIQ,KAApCC,EAxBPnB,EAwBOmB,OAAQb,EAxBfN,EAwBeM,SAAUC,EAxBzBP,EAwByBO,UAdvBY,GAAAb,GAAAC,EAVFP,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAUEW,EAAAG,OAAA,KAAAM,KAAA,CAAAlB,QAAA,0DAVFF,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,mBAAAA,MAUEQ,KAAAa,SAAAF,IAVFnB,KAAAA,GAAAA,GAUEsB,EAVFtB,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAaLa,EAAeF,OAAf,KAAAS,KAAA,CAAAlB,QAAA,oBAbKF,KAAAA,GAAAA,GAiBTsB,EAAAhB,WAAAA,EAjBSN,OAAAA,EAAAA,OAAAA,SAkBTa,EAAeF,OAAf,KAAAS,KAAA,CAAAlB,QAAA,wCAlBSF,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,OAAAA,EAAAA,KAAAA,GAAAA,mBAAAA,MAUEsB,EAAAC,aAVFvB,KAAAA,GAUEW,EAYPD,OAAIE,KAAJQ,KAAe,CAAAlB,QAZR,8BAVFF,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAUEwB,QAAAC,MAAAC,EAAAC,IAAAhB,EAAAG,OAAA,KAAAM,KAAA,CAAAlB,QAAA,sBAAAuB,MAAAC,EAAAC,KAVF3B,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAUEW,EAAAG,OAAA,KAcqCJ,KAAIQ,CAdzChB,QAAA,uBAVFF,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA","file":"deletePost.min.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Set CORS headers\r\nconst setCorsHeaders = (res) => {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');  // Allow all origins or specify your domain\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');  // Allowed methods\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Allowed headers\r\n};\r\n\r\n// Serverless API handler for handling different request types\r\nexport default async function handler(req, res) {\r\n    // Handle pre-flight OPTIONS request\r\n    if (req.method === 'OPTIONS') {\r\n        setCorsHeaders(res);\r\n        return res.status(200).end(); // Respond with 200 OK for OPTIONS pre-flight\r\n    }\r\n\r\n    // Set CORS headers for all other requests\r\n    setCorsHeaders(res);\r\n\r\n    await connectToDatabase(); // Ensure you're connected to the database\r\n\r\n    if (req.method === 'DELETE') {\r\n        try {\r\n            const { postId, username, sessionId } = req.body;\r\n            \r\n            // Check that the required fields are present\r\n            if (!postId || !username || !sessionId) {\r\n                return res.status(400).json({ message: 'Missing required fields: postId, username, sessionId' });\r\n            }\r\n\r\n            // Find the post to delete\r\n            const post = await Post.findById(postId);\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the post belongs to the user making the request\r\n            if (post.username !== username) {\r\n                return res.status(403).json({ message: 'You can only delete your own posts' });\r\n            }\r\n\r\n            // Delete the post from the database\r\n            await post.deleteOne();\r\n            res.status(200).json({ message: 'Post deleted successfully' });\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Error deleting post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}"]}