{"version":3,"sources":["posts.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","dislikes","likedBy","dislikedBy","comments","comment","Post","model","setCorsHeaders","res","setHeader","handler","req","method","status","end","find","sort","posts","json","console","error"],"mappings":";;;;;;;AAAA;;AACA;;;;AAAiD;AAEjD;AACA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ,MAJwB;AAKnCK,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GAL4B;AAMnCC,EAAAA,QAAQ,EAAE;AAAEF,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GANyB;AAOnCE,EAAAA,OAAO,EAAE,CAACT,MAAD,CAP0B;AAOf;AACpBU,EAAAA,UAAU,EAAE,CAACV,MAAD,CARuB;AAQZ;AACvBW,EAAAA,QAAQ,EAAE,CAAC;AAAER,IAAAA,QAAQ,EAAEH,MAAZ;AAAoBY,IAAAA,OAAO,EAAEZ,MAA7B;AAAqCC,IAAAA,SAAS,EAAEC;AAAhD,GAAD;AATyB,CAApB,CAAnB,C,CAYA;;AACA,IAAMW,IAAI,GAAGhB,qBAASiB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,CAAb,C,CAEA;;;AACA,IAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAS;AAC5B;AACAA,EAAAA,GAAG,CAACC,SAAJ,CAAc,6BAAd,EAA6C,GAA7C,EAF4B,CAEwB;;AACpDD,EAAAA,GAAG,CAACC,SAAJ,CAAc,8BAAd,EAA8C,kBAA9C,EAH4B,CAGwC;;AACpED,EAAAA,GAAG,CAACC,SAAJ,CAAc,8BAAd,EAA8C,cAA9C,EAJ4B,CAIoC;AACnE,CALD,C,CAOA;;;AACe,SAAeC,OAAf,CAAuBC,GAAvB,EAA4BH,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACX;AACAD,UAAAA,cAAc,CAACC,GAAD,CAAd,CAFW,CAIX;;AAJW,gBAKPG,GAAG,CAACC,MAAJ,KAAe,SALR;AAAA;AAAA;AAAA;;AAAA,2CAMAJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EANA;;AAAA;AAAA,gBAUPH,GAAG,CAACC,MAAJ,KAAe,KAVR;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAYG,4BAZH;;AAAA;AAAA;AAAA,0CAeiBP,IAAI,CAACU,IAAL,GAAYC,IAAZ,CAAiB;AAAEvB,YAAAA,SAAS,EAAE,CAAC;AAAd,WAAjB,CAfjB;;AAAA;AAeGwB,UAAAA,KAfH;AAgBHT,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqBD,KAArB,EAhBG,CAgB0B;;AAhB1B;AAAA;;AAAA;AAAA;AAAA;AAkBHE,UAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd;AACAZ,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAE3B,YAAAA,OAAO,EAAE,wBAAX;AAAqC6B,YAAAA,KAAK;AAA1C,WAArB,EAnBG,CAmBiE;;AAnBjE;AAAA;AAAA;;AAAA;AAsBP;AACAZ,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAE3B,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAvBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Set CORS headers\r\nconst setCorsHeaders = (res) => {\r\n    // You can replace this with a specific origin URL if necessary\r\n    res.setHeader('Access-Control-Allow-Origin', '*');  // Allow all origins\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');  // Allow specific methods\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Allow specific headers\r\n};\r\n\r\n// Serverless API handler for getting posts\r\nexport default async function handler(req, res) {\r\n    // Set CORS headers before processing the request\r\n    setCorsHeaders(res);\r\n\r\n    // Handle pre-flight OPTIONS request\r\n    if (req.method === 'OPTIONS') {\r\n        return res.status(200).end(); // Respond with a 200 OK for OPTIONS pre-flight\r\n    }\r\n\r\n    // Handle GET requests to fetch posts\r\n    if (req.method === 'GET') {\r\n        try {\r\n            await connectToDatabase(); // Connect to MongoDB\r\n\r\n            // Fetch posts from the database, sorted by the timestamp in descending order\r\n            const posts = await Post.find().sort({ timestamp: -1 });\r\n            res.status(200).json(posts); // Send posts as a JSON response\r\n        } catch (error) {\r\n            console.error(\"Error retrieving posts:\", error);\r\n            res.status(500).json({ message: 'Error retrieving posts', error }); // Handle any errors\r\n        }\r\n    } else {\r\n        // If the request is not a GET request, respond with 405 Method Not Allowed\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"posts.dev.js"}