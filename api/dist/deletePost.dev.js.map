{"version":3,"sources":["deletePost.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","Post","model","setCorsHeaders","res","setHeader","handler","req","method","status","end","body","postId","json","findById","post","deleteOne","console","error"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Set CORS headers\r\nconst setCorsHeaders = (res) => {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');  // Allow all origins or specify your domain\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');  // Allowed methods\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Allowed headers\r\n};\r\n\r\n// Serverless API handler for handling different request types\r\nexport default async function handler(req, res) {\r\n    // Handle pre-flight OPTIONS request\r\n    if (req.method === 'OPTIONS') {\r\n        setCorsHeaders(res);\r\n        return res.status(200).end(); // Respond with 200 OK for OPTIONS pre-flight\r\n    }\r\n\r\n    // Set CORS headers for all other requests\r\n    setCorsHeaders(res);\r\n\r\n    await connectToDatabase(); // Ensure you're connected to the database\r\n\r\n    if (req.method === 'DELETE') {\r\n        try {\r\n            const { postId, username, sessionId } = req.body;\r\n            \r\n            // Check that the required fields are present\r\n            if (!postId || !username || !sessionId) {\r\n                return res.status(400).json({ message: 'Missing required fields: postId, username, sessionId' });\r\n            }\r\n\r\n            // Find the post to delete\r\n            const post = await Post.findById(postId);\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Ensure the post belongs to the user making the request\r\n            if (post.username !== username) {\r\n                return res.status(403).json({ message: 'You can only delete your own posts' });\r\n            }\r\n\r\n            // Delete the post from the database\r\n            await post.deleteOne();\r\n            res.status(200).json({ message: 'Post deleted successfully' });\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Error deleting post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}"],"file":"deletePost.dev.js"}