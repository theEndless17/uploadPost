{"version":3,"sources":["postOpinion.js"],"names":["_db","require","_mongoose","_interopRequireDefault","_ably","postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","default","dislikes","likedBy","dislikedBy","comments","comment","Post","model","res","handler","req","_req$body","newPost","cleanPost","_req$body2","postId","_message","post","updatedPost","regeneratorRuntime","async","_context","prev","next","setCorsHeaders","abrupt","status","end","method","trim","json","setHeader","log","awrap","connectToDatabase","save","console","publishToAbly","t0","error","_id","t1","body","findById","sent","undefined","t2","t3","stop"],"mappings":"4FAAA,IAAAA,IAAAC,QAAA,eACAC,UAAAC,uBAAAF,QAAA,aACAG,MAAAH,QAAA,yFAGA,IAAMI,WAAa,IAAIC,UAAAA,QAASC,OAAO,CACnCC,QAASC,OANbC,UAAAC,KAQIC,SAAUH,OAPdI,UAAAJ,OASIK,MAAO,CAAEC,KAAMC,OAAQC,QAAS,GARpCC,SAAA,CAAAH,KAAAC,OAAAC,QAAA,GAUIE,QAAS,CAACV,QACVW,WAAY,CAACX,QACbY,SAAU,CAAC,CAAET,SAAUH,OAAQa,QAASb,OAAQC,UAAWC,SAZfY,KAAAjB,UAAAA,QAAAkB,MAAA,OAAAnB,YAI5CG,eADmC,SAAAiB,GAEnCf,EAAAA,UAFmC,8BAAA,KAGnCE,EAAAA,UAHmC,+BAAA,kCAInCC,EAAAA,UAAWJ,+BAJwB,iBAAA,SAAAiB,QAAAC,EAAAF,GAAA,IAAAG,EAAApB,EAAAI,EAAAC,EAAAgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnB,EAAAI,EAAAG,EAAAa,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAMzB,YAAMb,EAAEX,OANiB,OAMTyB,eAAShB,GANAa,EAAAI,OAAA,SAAAjB,EAAAkB,OAAA,KAAAC,OAAAN,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,GAQZC,eAAAhB,GACZ,SAAEb,EAAQiC,OATc,CAAAP,EAAAE,KAAA,GAAA,MAAA,GAAAZ,EASwBjB,EAAAA,KAAAA,EATxBiB,EASwBjB,QAAAA,EATxBiB,EASwBjB,SAAAA,EATxBiB,EASwBjB,UAT/DH,GAAA,KAAAA,EAAAsC,OAAuC,CAAAR,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAI,OAAA,SAoCpBjB,EAAIkB,OAAO,KAAKI,KAAK,CAAEvC,QAAS,6BApCZ,KAAA,EAAA,GAsC1BI,GAAaC,EAtCa,CAAAyB,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAI,OAAA,SAuCpBjB,EAAIkB,OAAO,KAAKI,KAAK,CAAEvC,QAAS,yCAvCZ,KAAA,GAAA,OAAA8B,EAAAC,KAAA,GAgB/BS,QAAUC,IAAA,6BAhBqBX,EAAAE,KAAA,GAAAJ,mBAAAc,OA4CrB,EAAAlD,IAAAmD,sBA5CqB,KAAA,GAAA,OAiB/BH,QAAUC,IAAA,oCA8BApB,EAAU,IAAIN,KAAK,CAAEf,QAAAA,EAASE,UAAW,IAAIC,KAAQC,SAAAA,EAAUC,UAAAA,IA/C1CyB,EAAAE,KAAA,GAAAJ,mBAAAc,MAgDrBrB,EAAQuB,QAhDa,KAAA,GAAA,OAqBxBC,QAAAJ,IAAA,kBAAApB,GArBwBS,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAc,OAqBxB,EAAA9C,MAAAkD,eAAA,aAAAzB,IArBwB,KAAA,GAqBxBwB,QAAAJ,IAAA,0BAAApB,GArBwBS,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAiB,GAAAjB,EAAA,MAAA,IAqBxBe,QAAAG,MAAA,4BAAAlB,EAAAiB,IArBwB,KAAA,GAwB/Bd,EAAA,CAHOgB,IAAA5B,EAAA4B,IA0CCjD,QAASqB,EAAQrB,QA1ClBE,UAAAmB,EAAAnB,UAOXE,SAAAiB,EAAAjB,SACA6B,MAAAA,EAAA3B,MAsCYI,SAAUW,EAAQX,SApC1BS,SAAAE,EAAeR,UAVRI,EAAAkB,OAAA,KAAAI,KAAAjB,GArBwBQ,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,MAAA,IAgC/Be,QAAAG,MAAA,qBAAAlB,EAAAoB,IAXOjC,EAAAkB,OAYkChB,KAAIgC,KAArCnD,CAAAA,QAZD,oBAYUI,MAZV0B,EAAAoB,KArBwB,KAAA,GAAApB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,GAmCfhC,QAdTmB,EAcFnB,QAdE,UAciBsC,EAARD,OAnCe,CAAAP,EAAAE,KAAA,GAAA,MAAA,GAAAT,EAqBxBJ,EAAAgC,KAAA3B,EArBwBD,EAqBxBC,OAAAxB,EArBwBuB,EAqBxBvB,QAAAM,EArBwBiB,EAqBxBjB,MAAAI,EArBwBa,EAqBxBb,SAAAG,EArBwBU,EAqBxBV,SA2DFW,EAhF0B,CAAAM,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAI,OAAA,SAqBxBjB,EAAAkB,OAAA,KAAAI,KAAA,CAAAvC,QAeQmC,yBApCgB,KAAA,GAAA,OAAAL,EAAAC,KAAA,GAqBxBc,QAiBFzC,IAAAA,6BAtC0B0B,EAAAE,KAAA,GAAAJ,mBAAAc,OAqBxB,EAAAlD,IAAAmD,sBArBwB,KAAA,GAAA,OAqBxBE,QAAAJ,IAAA,oCArBwBX,EAAAE,KAAA,GAAAJ,mBAAAc,MA0FR3B,KAAKqC,SAAS5B,IA1FN,KAAA,GAAA,GA0FrBE,EA1FqBI,EAAAuB,KAAA,CAAAvB,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAI,OAAA,SAuCYjB,EAAAkB,OAAA,KAAAI,KAAA,CAAAvC,QAAA,oBAvCZ,KAAA,GAAA,OAqBxBA,GAAA,KAAAA,EAAAsC,SAsBHO,EAAA7C,QAAYA,QAtBTsD,IAAAhD,IA+ECoB,EAAKpB,MAAQA,QAxDWgD,IAAA5C,IAC5BmC,EAAAnC,SAAYA,QAEa4C,IAAEtD,IAASE,EAASW,SAAEA,GA/CpBiB,EAAAE,KAAA,GAAAJ,mBAAAc,MAqBxBhB,EAAAkB,QArBwB,KAAA,GAAA,OAgH3BC,QAAQJ,IAAI,gBAAiBf,GAhHFI,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAAAJ,mBAAAc,OAqBxB,EAAA9C,MAAAkD,eAAA,cAAApB,IArBwB,KAAA,GAqBxBmB,QAAAJ,IAAA,wBAAAf,GArBwBI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAyB,GAAAzB,EAAA,MAAA,IAuHvBe,QAAQG,MAAM,4BAAdlB,EAAAyB,IAvHuB,KAAA,GAqBxB5B,EAAA,CAuGCsB,IAAKvB,EAAKuB,IAvGXjD,QAAA0B,EAAA1B,QAAAE,UAAAwB,EAAAxB,UAAAE,SAAAsB,EAAAtB,SAoCCyC,MAAAnB,EAAcpB,MAwEdI,SAAUgB,EAAKhB,SA5GhBG,SAAAa,EAAAb,UAyCCoC,EAAGd,OAAEd,KADSkB,KAAAZ,GA7DSG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAA0B,GAAA1B,EAAA,MAAA,IAiEvB1B,QAAQ4C,MAAE3B,sBAAVjB,EAAAA,IACAE,EAAAA,OAAOe,KAAQf,KALD,CAAAN,QAAA,qBAAAgD,MAAAlB,EAAA0B,KA7DS,KAAA,GAAA1B,EAAAE,KAAA,GAAA,MAAA,KAAA,GA6DTf,EAxCfkB,OAAA,KAAAI,KAAA,CAAAvC,QAAA,uBArBwB,KAAA,GAAA,IAAA,MAAA,OAAA8B,EAAA2B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA","file":"postOpinion.min.js","sourcesContent":["import { connectToDatabase } from '../utils/db';  // Corrected path\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from '../utils/ably';  // Corrected path\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Set CORS headers\r\nconst setCorsHeaders = (res) => {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');  // Allow all origins or set a specific domain\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, OPTIONS');  // Allowed methods\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Allowed headers\r\n};\r\n\r\n// Serverless API handler for creating/editing posts\r\nexport default async function handler(req, res) {\r\n    // Handle pre-flight OPTIONS request\r\n    if (req.method === 'OPTIONS') {\r\n        setCorsHeaders(res);\r\n        return res.status(200).end(); // Respond with 200 OK for OPTIONS pre-flight\r\n    }\r\n\r\n    // Set CORS headers before processing the request\r\n    setCorsHeaders(res);\r\n\r\n    if (req.method === 'POST') {\r\n        // Handle new post creation\r\n        const { message, username, sessionId } = req.body;\r\n\r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n        if (!username || !sessionId) {\r\n            return res.status(400).json({ message: 'Username and sessionId are required' });\r\n        }\r\n\r\n        try {\r\n            console.log('Connecting to database...');\r\n            await connectToDatabase();  // Ensure this step completes\r\n            console.log('Database connected successfully.');\r\n\r\n            const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n            await newPost.save();\r\n\r\n            console.log('New post saved:', newPost);\r\n\r\n            // Publish to Ably\r\n            try {\r\n                await publishToAbly('newOpinion', newPost);\r\n                console.log('Post published to Ably:', newPost);\r\n            } catch (error) {\r\n                console.error('Error publishing to Ably:', error);\r\n            }\r\n\r\n            // Send only the necessary data (not the full Mongoose document)\r\n            const cleanPost = {\r\n                _id: newPost._id,\r\n                message: newPost.message,\r\n                timestamp: newPost.timestamp,\r\n                username: newPost.username,\r\n                likes: newPost.likes,\r\n                dislikes: newPost.dislikes,\r\n                comments: newPost.comments,\r\n            };\r\n\r\n            res.status(201).json(cleanPost);  // Send clean post data without Mongoose metadata\r\n        } catch (error) {\r\n            console.error('Error saving post:', error);\r\n            res.status(500).json({ message: 'Error saving post', error });\r\n        }\r\n    } else if (req.method === 'PUT' || req.method === 'PATCH') {\r\n        // Handle post edit\r\n        const { postId, message, likes, dislikes, comments } = req.body;\r\n\r\n        if (!postId) {\r\n            return res.status(400).json({ message: 'Post ID is required' });\r\n        }\r\n\r\n        // Fetch the post by its ID\r\n        try {\r\n            console.log('Connecting to database...');\r\n            await connectToDatabase();\r\n            console.log('Database connected successfully.');\r\n\r\n            const post = await Post.findById(postId);\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Update the fields (message, likes, dislikes, comments)\r\n            if (message && message.trim() !== '') {\r\n                post.message = message;\r\n            }\r\n            if (likes !== undefined) {\r\n                post.likes = likes;\r\n            }\r\n            if (dislikes !== undefined) {\r\n                post.dislikes = dislikes;\r\n            }\r\n            if (comments !== undefined) {\r\n                post.comments = comments;\r\n            }\r\n\r\n            // Save the updated post\r\n            await post.save();\r\n\r\n            console.log('Post updated:', post);\r\n\r\n            // Publish to Ably\r\n            try {\r\n                await publishToAbly('editOpinion', post);\r\n                console.log('Post updated in Ably:', post);\r\n            } catch (error) {\r\n                console.error('Error publishing to Ably:', error);\r\n            }\r\n\r\n            // Send only the necessary data (not the full Mongoose document)\r\n            const updatedPost = {\r\n                _id: post._id,\r\n                message: post.message,\r\n                timestamp: post.timestamp,\r\n                username: post.username,\r\n                likes: post.likes,\r\n                dislikes: post.dislikes,\r\n                comments: post.comments,\r\n            };\r\n\r\n            res.status(200).json(updatedPost);  // Send updated post data\r\n\r\n        } catch (error) {\r\n            console.error('Error editing post:', error);\r\n            res.status(500).json({ message: 'Error editing post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"]}