{"version":3,"sources":["editPost.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","dislikes","likedBy","dislikedBy","comments","comment","Post","model","setCorsHeaders","res","setHeader","handler","req","method","status","end","body","postId","action","findById","post","json","includes","push","trim","save","console","error"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\r\nimport { connectToDatabase } from '../utils/db'; // Your connection utility\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\n\r\n// Create the model for posts\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Set CORS headers\r\nconst setCorsHeaders = (res) => {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');  // Allow all origins or specify your domain\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, OPTIONS');  // Allowed methods\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Allowed headers\r\n};\r\n\r\n// Serverless API handler for liking, disliking, or commenting on a post\r\nexport default async function handler(req, res) {\r\n    // Handle pre-flight OPTIONS request\r\n    if (req.method === 'OPTIONS') {\r\n        setCorsHeaders(res);\r\n        return res.status(200).end(); // Respond with 200 OK for OPTIONS pre-flight\r\n    }\r\n\r\n    // Set CORS headers for all other requests\r\n    setCorsHeaders(res);\r\n\r\n    const { postId, username, action, comment } = req.body;\r\n\r\n    try {\r\n        await connectToDatabase(); // Ensure you're connected to the DB\r\n\r\n        if (req.method === 'POST') {\r\n            // Find the post by postId\r\n            const post = await Post.findById(postId);\r\n\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Handle the \"like\" action\r\n            if (action === 'like') {\r\n                // Check if the user has already disliked this post\r\n                if (post.dislikedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You cannot like a post you have disliked' });\r\n                }\r\n\r\n                // Check if the user has already liked this post\r\n                if (post.likedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You have already liked this post' });\r\n                }\r\n\r\n                post.likes += 1;\r\n                post.likedBy.push(username); // Add the user to the likedBy array\r\n\r\n            // Handle the \"dislike\" action\r\n            } else if (action === 'dislike') {\r\n                // Check if the user has already liked this post\r\n                if (post.likedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You cannot dislike a post you have liked' });\r\n                }\r\n\r\n                // Check if the user has already disliked this post\r\n                if (post.dislikedBy.includes(username)) {\r\n                    return res.status(400).json({ message: 'You have already disliked this post' });\r\n                }\r\n\r\n                post.dislikes += 1;\r\n                post.dislikedBy.push(username); // Add the user to the dislikedBy array\r\n\r\n            // Handle the \"comment\" action\r\n            } else if (action === 'comment') {\r\n                if (!comment || !comment.trim()) {\r\n                    return res.status(400).json({ message: 'Comment cannot be empty' });\r\n                }\r\n\r\n                post.comments.push({ username, comment, timestamp: new Date() });\r\n\r\n            } else {\r\n                return res.status(400).json({ message: 'Invalid action type' });\r\n            }\r\n\r\n            // Save the updated post\r\n            await post.save();\r\n            return res.json(post);\r\n        } else {\r\n            res.status(405).json({ message: 'Method Not Allowed' });\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ message: 'Error updating post', error });\r\n    }\r\n}"],"file":"editPost.dev.js"}