{"version":3,"sources":["postOpinion.js"],"names":["postSchema","mongoose","Schema","message","String","timestamp","Date","username","sessionId","likes","type","Number","dislikes","likedBy","dislikedBy","comments","comment","Post","model","setCorsHeaders","res","setHeader","handler","req","method","status","end","body","trim","json","console","log","newPost","save","error","cleanPost","_id","postId","findById","post","undefined","updatedPost"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAFkD;AAEF;AAEhD;AACA,IAAMA,UAAU,GAAG,IAAIC,qBAASC,MAAb,CAAoB;AACnCC,EAAAA,OAAO,EAAEC,MAD0B;AAEnCC,EAAAA,SAAS,EAAEC,IAFwB;AAGnCC,EAAAA,QAAQ,EAAEH,MAHyB;AAInCI,EAAAA,SAAS,EAAEJ,MAJwB;AAKnCK,EAAAA,KAAK,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GAL4B;AAMnCC,EAAAA,QAAQ,EAAE;AAAEF,IAAAA,IAAI,EAAEC,MAAR;AAAgB,eAAS;AAAzB,GANyB;AAOnCE,EAAAA,OAAO,EAAE,CAACT,MAAD,CAP0B;AAOf;AACpBU,EAAAA,UAAU,EAAE,CAACV,MAAD,CARuB;AAQZ;AACvBW,EAAAA,QAAQ,EAAE,CAAC;AAAER,IAAAA,QAAQ,EAAEH,MAAZ;AAAoBY,IAAAA,OAAO,EAAEZ,MAA7B;AAAqCC,IAAAA,SAAS,EAAEC;AAAhD,GAAD;AATyB,CAApB,CAAnB;;AAWA,IAAMW,IAAI,GAAGhB,qBAASiB,KAAT,CAAe,MAAf,EAAuBlB,UAAvB,CAAb,C,CAEA;;;AACA,IAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAS;AAC5BA,EAAAA,GAAG,CAACC,SAAJ,CAAc,6BAAd,EAA6C,GAA7C,EAD4B,CACwB;;AACpDD,EAAAA,GAAG,CAACC,SAAJ,CAAc,8BAAd,EAA8C,gCAA9C,EAF4B,CAEsD;;AAClFD,EAAAA,GAAG,CAACC,SAAJ,CAAc,8BAAd,EAA8C,cAA9C,EAH4B,CAGoC;AACnE,CAJD,C,CAMA;;;AACe,SAAeC,OAAf,CAAuBC,GAAvB,EAA4BH,GAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEPG,GAAG,CAACC,MAAJ,KAAe,SAFR;AAAA;AAAA;AAAA;;AAGPL,UAAAA,cAAc,CAACC,GAAD,CAAd;AAHO,2CAIAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAJA;;AAAA;AAOX;AACAP,UAAAA,cAAc,CAACC,GAAD,CAAd;;AARW,gBAUPG,GAAG,CAACC,MAAJ,KAAe,MAVR;AAAA;AAAA;AAAA;;AAWP;AAXO,sBAYkCD,GAAG,CAACI,IAZtC,EAYCxB,OAZD,aAYCA,OAZD,EAYUI,QAZV,aAYUA,QAZV,EAYoBC,SAZpB,aAYoBA,SAZpB;;AAAA,gBAcH,CAACL,OAAD,IAAYA,OAAO,CAACyB,IAAR,OAAmB,EAd5B;AAAA;AAAA;AAAA;;AAAA,2CAeIR,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAE1B,YAAAA,OAAO,EAAE;AAAX,WAArB,CAfJ;;AAAA;AAAA,gBAiBH,CAACI,QAAD,IAAa,CAACC,SAjBX;AAAA;AAAA;AAAA;;AAAA,2CAkBIY,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAE1B,YAAAA,OAAO,EAAE;AAAX,WAArB,CAlBJ;;AAAA;AAAA;AAsBH2B,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAtBG;AAAA,0CAuBG,4BAvBH;;AAAA;AAuByB;AAC5BD,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAEMC,UAAAA,OA1BH,GA0Ba,IAAIf,IAAJ,CAAS;AAAEd,YAAAA,OAAO,EAAPA,OAAF;AAAWE,YAAAA,SAAS,EAAE,IAAIC,IAAJ,EAAtB;AAAkCC,YAAAA,QAAQ,EAARA,QAAlC;AAA4CC,YAAAA,SAAS,EAATA;AAA5C,WAAT,CA1Bb;AAAA;AAAA,0CA2BGwB,OAAO,CAACC,IAAR,EA3BH;;AAAA;AA6BHH,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,OAA/B,EA7BG,CA+BH;;AA/BG;AAAA;AAAA,0CAiCO,yBAAc,YAAd,EAA4BA,OAA5B,CAjCP;;AAAA;AAkCCF,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCC,OAAvC;AAlCD;AAAA;;AAAA;AAAA;AAAA;AAoCCF,UAAAA,OAAO,CAACI,KAAR,CAAc,2BAAd;;AApCD;AAuCH;AACMC,UAAAA,SAxCH,GAwCe;AACdC,YAAAA,GAAG,EAAEJ,OAAO,CAACI,GADC;AAEdjC,YAAAA,OAAO,EAAE6B,OAAO,CAAC7B,OAFH;AAGdE,YAAAA,SAAS,EAAE2B,OAAO,CAAC3B,SAHL;AAIdE,YAAAA,QAAQ,EAAEyB,OAAO,CAACzB,QAJJ;AAKdE,YAAAA,KAAK,EAAEuB,OAAO,CAACvB,KALD;AAMdG,YAAAA,QAAQ,EAAEoB,OAAO,CAACpB,QANJ;AAOdG,YAAAA,QAAQ,EAAEiB,OAAO,CAACjB;AAPJ,WAxCf;AAkDHK,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBM,SAArB,EAlDG,CAkD+B;;AAlD/B;AAAA;;AAAA;AAAA;AAAA;AAoDHL,UAAAA,OAAO,CAACI,KAAR,CAAc,oBAAd;AACAd,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAE1B,YAAAA,OAAO,EAAE,mBAAX;AAAgC+B,YAAAA,KAAK;AAArC,WAArB;;AArDG;AAAA;AAAA;;AAAA;AAAA,gBAuDAX,GAAG,CAACC,MAAJ,KAAe,KAAf,IAAwBD,GAAG,CAACC,MAAJ,KAAe,OAvDvC;AAAA;AAAA;AAAA;;AAwDP;AAxDO,uBAyDgDD,GAAG,CAACI,IAzDpD,EAyDCU,MAzDD,cAyDCA,MAzDD,EAyDSlC,QAzDT,cAyDSA,OAzDT,EAyDkBM,KAzDlB,cAyDkBA,KAzDlB,EAyDyBG,QAzDzB,cAyDyBA,QAzDzB,EAyDmCG,QAzDnC,cAyDmCA,QAzDnC;;AAAA,cA2DFsB,MA3DE;AAAA;AAAA;AAAA;;AAAA,2CA4DIjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAE1B,YAAAA,OAAO,EAAE;AAAX,WAArB,CA5DJ;;AAAA;AAAA;AAiEH2B,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAjEG;AAAA,0CAkEG,4BAlEH;;AAAA;AAmEHD,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAnEG;AAAA,0CAqEgBd,IAAI,CAACqB,QAAL,CAAcD,MAAd,CArEhB;;AAAA;AAqEGE,UAAAA,IArEH;;AAAA,cAsEEA,IAtEF;AAAA;AAAA;AAAA;;AAAA,2CAuEQnB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAE1B,YAAAA,OAAO,EAAE;AAAX,WAArB,CAvER;;AAAA;AA0EH;AACA,cAAIA,QAAO,IAAIA,QAAO,CAACyB,IAAR,OAAmB,EAAlC,EAAsC;AAClCW,YAAAA,IAAI,CAACpC,OAAL,GAAeA,QAAf;AACH;;AACD,cAAIM,KAAK,KAAK+B,SAAd,EAAyB;AACrBD,YAAAA,IAAI,CAAC9B,KAAL,GAAaA,KAAb;AACH;;AACD,cAAIG,QAAQ,KAAK4B,SAAjB,EAA4B;AACxBD,YAAAA,IAAI,CAAC3B,QAAL,GAAgBA,QAAhB;AACH;;AACD,cAAIG,QAAQ,KAAKyB,SAAjB,EAA4B;AACxBD,YAAAA,IAAI,CAACxB,QAAL,GAAgBA,QAAhB;AACH,WAtFE,CAwFH;;;AAxFG;AAAA,0CAyFGwB,IAAI,CAACN,IAAL,EAzFH;;AAAA;AA2FHH,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BQ,IAA7B,EA3FG,CA6FH;;AA7FG;AAAA;AAAA,0CA+FO,yBAAc,aAAd,EAA6BA,IAA7B,CA/FP;;AAAA;AAgGCT,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCQ,IAArC;AAhGD;AAAA;;AAAA;AAAA;AAAA;AAkGCT,UAAAA,OAAO,CAACI,KAAR,CAAc,2BAAd;;AAlGD;AAqGH;AACMO,UAAAA,WAtGH,GAsGiB;AAChBL,YAAAA,GAAG,EAAEG,IAAI,CAACH,GADM;AAEhBjC,YAAAA,OAAO,EAAEoC,IAAI,CAACpC,OAFE;AAGhBE,YAAAA,SAAS,EAAEkC,IAAI,CAAClC,SAHA;AAIhBE,YAAAA,QAAQ,EAAEgC,IAAI,CAAChC,QAJC;AAKhBE,YAAAA,KAAK,EAAE8B,IAAI,CAAC9B,KALI;AAMhBG,YAAAA,QAAQ,EAAE2B,IAAI,CAAC3B,QANC;AAOhBG,YAAAA,QAAQ,EAAEwB,IAAI,CAACxB;AAPC,WAtGjB;AAgHHK,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBY,WAArB,EAhHG,CAgHiC;;AAhHjC;AAAA;;AAAA;AAAA;AAAA;AAmHHX,UAAAA,OAAO,CAACI,KAAR,CAAc,qBAAd;AACAd,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAE1B,YAAAA,OAAO,EAAE,oBAAX;AAAiC+B,YAAAA,KAAK;AAAtC,WAArB;;AApHG;AAAA;AAAA;;AAAA;AAuHPd,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqB;AAAE1B,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAvHO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { connectToDatabase } from '../utils/db';  // Corrected path\r\nimport mongoose from 'mongoose';\r\nimport { publishToAbly } from '../utils/ably';  // Corrected path\r\n\r\n// Define the schema for the post\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String,\r\n    sessionId: String,\r\n    likes: { type: Number, default: 0 },\r\n    dislikes: { type: Number, default: 0 },\r\n    likedBy: [String],  // Store usernames or user IDs of users who liked the post\r\n    dislikedBy: [String],  // Store usernames or user IDs of users who disliked the post\r\n    comments: [{ username: String, comment: String, timestamp: Date }]\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Set CORS headers\r\nconst setCorsHeaders = (res) => {\r\n    res.setHeader('Access-Control-Allow-Origin', '*');  // Allow all origins or set a specific domain\r\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, OPTIONS');  // Allowed methods\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');  // Allowed headers\r\n};\r\n\r\n// Serverless API handler for creating/editing posts\r\nexport default async function handler(req, res) {\r\n    // Handle pre-flight OPTIONS request\r\n    if (req.method === 'OPTIONS') {\r\n        setCorsHeaders(res);\r\n        return res.status(200).end(); // Respond with 200 OK for OPTIONS pre-flight\r\n    }\r\n\r\n    // Set CORS headers before processing the request\r\n    setCorsHeaders(res);\r\n\r\n    if (req.method === 'POST') {\r\n        // Handle new post creation\r\n        const { message, username, sessionId } = req.body;\r\n\r\n        if (!message || message.trim() === '') {\r\n            return res.status(400).json({ message: 'Message cannot be empty' });\r\n        }\r\n        if (!username || !sessionId) {\r\n            return res.status(400).json({ message: 'Username and sessionId are required' });\r\n        }\r\n\r\n        try {\r\n            console.log('Connecting to database...');\r\n            await connectToDatabase();  // Ensure this step completes\r\n            console.log('Database connected successfully.');\r\n\r\n            const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n            await newPost.save();\r\n\r\n            console.log('New post saved:', newPost);\r\n\r\n            // Publish to Ably\r\n            try {\r\n                await publishToAbly('newOpinion', newPost);\r\n                console.log('Post published to Ably:', newPost);\r\n            } catch (error) {\r\n                console.error('Error publishing to Ably:', error);\r\n            }\r\n\r\n            // Send only the necessary data (not the full Mongoose document)\r\n            const cleanPost = {\r\n                _id: newPost._id,\r\n                message: newPost.message,\r\n                timestamp: newPost.timestamp,\r\n                username: newPost.username,\r\n                likes: newPost.likes,\r\n                dislikes: newPost.dislikes,\r\n                comments: newPost.comments,\r\n            };\r\n\r\n            res.status(201).json(cleanPost);  // Send clean post data without Mongoose metadata\r\n        } catch (error) {\r\n            console.error('Error saving post:', error);\r\n            res.status(500).json({ message: 'Error saving post', error });\r\n        }\r\n    } else if (req.method === 'PUT' || req.method === 'PATCH') {\r\n        // Handle post edit\r\n        const { postId, message, likes, dislikes, comments } = req.body;\r\n\r\n        if (!postId) {\r\n            return res.status(400).json({ message: 'Post ID is required' });\r\n        }\r\n\r\n        // Fetch the post by its ID\r\n        try {\r\n            console.log('Connecting to database...');\r\n            await connectToDatabase();\r\n            console.log('Database connected successfully.');\r\n\r\n            const post = await Post.findById(postId);\r\n            if (!post) {\r\n                return res.status(404).json({ message: 'Post not found' });\r\n            }\r\n\r\n            // Update the fields (message, likes, dislikes, comments)\r\n            if (message && message.trim() !== '') {\r\n                post.message = message;\r\n            }\r\n            if (likes !== undefined) {\r\n                post.likes = likes;\r\n            }\r\n            if (dislikes !== undefined) {\r\n                post.dislikes = dislikes;\r\n            }\r\n            if (comments !== undefined) {\r\n                post.comments = comments;\r\n            }\r\n\r\n            // Save the updated post\r\n            await post.save();\r\n\r\n            console.log('Post updated:', post);\r\n\r\n            // Publish to Ably\r\n            try {\r\n                await publishToAbly('editOpinion', post);\r\n                console.log('Post updated in Ably:', post);\r\n            } catch (error) {\r\n                console.error('Error publishing to Ably:', error);\r\n            }\r\n\r\n            // Send only the necessary data (not the full Mongoose document)\r\n            const updatedPost = {\r\n                _id: post._id,\r\n                message: post.message,\r\n                timestamp: post.timestamp,\r\n                username: post.username,\r\n                likes: post.likes,\r\n                dislikes: post.dislikes,\r\n                comments: post.comments,\r\n            };\r\n\r\n            res.status(200).json(updatedPost);  // Send updated post data\r\n\r\n        } catch (error) {\r\n            console.error('Error editing post:', error);\r\n            res.status(500).json({ message: 'Error editing post', error });\r\n        }\r\n    } else {\r\n        res.status(405).json({ message: 'Method Not Allowed' });\r\n    }\r\n}\r\n"],"file":"postOpinion.dev.js"}