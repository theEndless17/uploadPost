{"version":3,"sources":["server.js"],"names":["require","config","express","mongoose","Ably","app","use","json","connect","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","postSchema","Schema","message","String","timestamp","Date","username","sessionId","Post","model","ably","Realtime","ABLY_API_KEY","channel","channels","get","req","res","find","sort","posts","status","error","post","body","trim","newPost","save","console","log","publish","toObject","id","_id","put","params","findById","findByIdAndDelete","stack","port","PORT","listen"],"mappings":"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","sourcesContent":["require('dotenv').config(); // To load environment variables from a .env file\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Ably = require('ably');\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(express.json());\r\napp.use(express.static('public'));\r\n\r\n// MongoDB setup (replace with your MongoDB URI in the .env file)\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n});\r\n\r\n// Schema definition for posts\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String, // Add username to the schema\r\n    sessionId: String, // Store sessionId to track users\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Ably setup (replace with your Ably API key in the .env file)\r\nconst ably = new Ably.Realtime(process.env.ABLY_API_KEY);\r\nconst channel = ably.channels.get('opinions');\r\n\r\n// Routes\r\n\r\n// Get all posts (GET route)\r\napp.get('/posts', async (req, res) => {\r\n    try {\r\n        const posts = await Post.find().sort({ timestamp: -1 }); // Sort by timestamp in descending order\r\n        res.status(200).json(posts);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error retrieving posts', error });\r\n    }\r\n});\r\n\r\n// Post a new opinion (POST route)\r\napp.post('/postOpinion', async (req, res) => {\r\n    const { message, username, sessionId } = req.body;\r\n    if (!message || message.trim() === '') {\r\n        return res.status(400).json({ message: 'Message cannot be empty' });\r\n    }\r\n    if (!username || !sessionId) {\r\n        return res.status(400).json({ message: 'Username and sessionId are required' });\r\n    }\r\n\r\n    try {\r\n        const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n        await newPost.save();\r\n\r\n        // Log the new post data\r\n        console.log('New post created:', newPost);\r\n\r\n        // Publish new post to Ably\r\n        channel.publish('newOpinion', {\r\n            ...newPost.toObject(),\r\n            id: newPost._id,\r\n        });\r\n\r\n        res.status(201).json(newPost);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error saving post', error });\r\n    }\r\n});\r\n\r\n// Edit an opinion (PUT route)\r\napp.put('/editPost/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { message, username, sessionId } = req.body;\r\n\r\n    if (!message || message.trim() === '') {\r\n        return res.status(400).json({ message: 'Message cannot be empty' });\r\n    }\r\n\r\n    try {\r\n        const post = await Post.findById(id);\r\n        if (!post) {\r\n            return res.status(404).json({ message: 'Post not found' });\r\n        }\r\n\r\n        // Ensure the sessionId and username match the post data\r\n        if (post.username !== username || post.sessionId !== sessionId) {\r\n            return res.status(403).json({ message: 'You can only edit your own posts' });\r\n        }\r\n\r\n        // Update the post\r\n        post.message = message;\r\n        post.timestamp = new Date();\r\n        await post.save();\r\n\r\n        // Publish the edited post to Ably\r\n        channel.publish('editOpinion', {\r\n            ...post.toObject(),\r\n            id: post._id,\r\n        });\r\n\r\n        res.status(200).json(post);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error updating post', error });\r\n    }\r\n});\r\n\r\n// Delete an opinion (DELETE route)\r\napp.delete('/deletePost/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { username, sessionId } = req.body;\r\n\r\n    console.log(`Received delete request for post ID: ${id}`);\r\n    console.log(`Request body: username = ${username}, sessionId = ${sessionId}`);\r\n\r\n    try {\r\n        const post = await Post.findById(id);\r\n        if (!post) {\r\n            console.log(`Post with ID ${id} not found`);\r\n            return res.status(404).json({ message: 'Post not found' });\r\n        }\r\n\r\n        console.log(`Post data: username = ${post.username}, sessionId = ${post.sessionId}`);\r\n\r\n        if (post.username !== username || post.sessionId !== sessionId) {\r\n            console.log(`User ${username} is not authorized to delete this post`);\r\n            return res.status(403).json({ message: 'You can only delete your own posts' });\r\n        }\r\n\r\n        // Use deleteOne or findByIdAndDelete instead of remove\r\n        await Post.findByIdAndDelete(id);\r\n        console.log(`Post with ID ${id} deleted successfully`);\r\n\r\n        // Notify Ably about the deleted post\r\n        channel.publish('deleteOpinion', { id });\r\n\r\n        res.status(200).json({ message: 'Post deleted successfully' });\r\n    } catch (error) {\r\n        console.error(`Error occurred while deleting post with ID ${id}:`, error);\r\n        res.status(500).json({\r\n            message: 'Error deleting post',\r\n            error: error.message,\r\n            stack: error.stack,\r\n        });\r\n    }\r\n});\r\n\r\n\r\n// Server setup\r\nconst port = process.env.PORT || 3000;\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"],"file":"server.dev.js"}