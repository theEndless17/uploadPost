{"version":3,"sources":["server.js"],"names":["require","config","express","mongoose","Ably","app","use","json","env","MONGODB_URI","useNewUrlParser","Schema","message","String","Date","sessionId","model","postSchema","ably","Realtime","process","ABLY_API_KEY","req","res","Post","find","sort","timestamp","posts","status","error","_context","t0","post","_req$body","username","newPost","regeneratorRuntime","async","_context2","prev","next","body","trim","abrupt","awrap","save","channel","publish","_objectSpread","toObject","id","_id","stop","put","_req$body2","_context3","params","findById","sent","console","log","concat","findByIdAndDelete","_context4","stack","PORT","listen","port"],"mappings":"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","file":"server.min.js","sourcesContent":["require('dotenv').config(); // To load environment variables from a .env file\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Ably = require('ably');\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(express.json());\r\napp.use(express.static('public'));\r\n\r\n// MongoDB setup (replace with your MongoDB URI in the .env file)\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n});\r\n\r\n// Schema definition for posts\r\nconst postSchema = new mongoose.Schema({\r\n    message: String,\r\n    timestamp: Date,\r\n    username: String, // Add username to the schema\r\n    sessionId: String, // Store sessionId to track users\r\n});\r\nconst Post = mongoose.model('Post', postSchema);\r\n\r\n// Ably setup (replace with your Ably API key in the .env file)\r\nconst ably = new Ably.Realtime(process.env.ABLY_API_KEY);\r\nconst channel = ably.channels.get('opinions');\r\n\r\n// Routes\r\n\r\n// Get all posts (GET route)\r\napp.get('/posts', async (req, res) => {\r\n    try {\r\n        const posts = await Post.find().sort({ timestamp: -1 }); // Sort by timestamp in descending order\r\n        res.status(200).json(posts);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error retrieving posts', error });\r\n    }\r\n});\r\n\r\n// Post a new opinion (POST route)\r\napp.post('/postOpinion', async (req, res) => {\r\n    const { message, username, sessionId } = req.body;\r\n    if (!message || message.trim() === '') {\r\n        return res.status(400).json({ message: 'Message cannot be empty' });\r\n    }\r\n    if (!username || !sessionId) {\r\n        return res.status(400).json({ message: 'Username and sessionId are required' });\r\n    }\r\n\r\n    try {\r\n        const newPost = new Post({ message, timestamp: new Date(), username, sessionId });\r\n        await newPost.save();\r\n\r\n        // Log the new post data\r\n        console.log('New post created:', newPost);\r\n\r\n        // Publish new post to Ably\r\n        channel.publish('newOpinion', {\r\n            ...newPost.toObject(),\r\n            id: newPost._id,\r\n        });\r\n\r\n        res.status(201).json(newPost);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error saving post', error });\r\n    }\r\n});\r\n\r\n// Edit an opinion (PUT route)\r\napp.put('/editPost/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { message, username, sessionId } = req.body;\r\n\r\n    if (!message || message.trim() === '') {\r\n        return res.status(400).json({ message: 'Message cannot be empty' });\r\n    }\r\n\r\n    try {\r\n        const post = await Post.findById(id);\r\n        if (!post) {\r\n            return res.status(404).json({ message: 'Post not found' });\r\n        }\r\n\r\n        // Ensure the sessionId and username match the post data\r\n        if (post.username !== username || post.sessionId !== sessionId) {\r\n            return res.status(403).json({ message: 'You can only edit your own posts' });\r\n        }\r\n\r\n        // Update the post\r\n        post.message = message;\r\n        post.timestamp = new Date();\r\n        await post.save();\r\n\r\n        // Publish the edited post to Ably\r\n        channel.publish('editOpinion', {\r\n            ...post.toObject(),\r\n            id: post._id,\r\n        });\r\n\r\n        res.status(200).json(post);\r\n    } catch (error) {\r\n        res.status(500).json({ message: 'Error updating post', error });\r\n    }\r\n});\r\n\r\n// Delete an opinion (DELETE route)\r\napp.delete('/deletePost/:id', async (req, res) => {\r\n    const { id } = req.params;\r\n    const { username, sessionId } = req.body;\r\n\r\n    console.log(`Received delete request for post ID: ${id}`);\r\n    console.log(`Request body: username = ${username}, sessionId = ${sessionId}`);\r\n\r\n    try {\r\n        const post = await Post.findById(id);\r\n        if (!post) {\r\n            console.log(`Post with ID ${id} not found`);\r\n            return res.status(404).json({ message: 'Post not found' });\r\n        }\r\n\r\n        console.log(`Post data: username = ${post.username}, sessionId = ${post.sessionId}`);\r\n\r\n        if (post.username !== username || post.sessionId !== sessionId) {\r\n            console.log(`User ${username} is not authorized to delete this post`);\r\n            return res.status(403).json({ message: 'You can only delete your own posts' });\r\n        }\r\n\r\n        // Use deleteOne or findByIdAndDelete instead of remove\r\n        await Post.findByIdAndDelete(id);\r\n        console.log(`Post with ID ${id} deleted successfully`);\r\n\r\n        // Notify Ably about the deleted post\r\n        channel.publish('deleteOpinion', { id });\r\n\r\n        res.status(200).json({ message: 'Post deleted successfully' });\r\n    } catch (error) {\r\n        console.error(`Error occurred while deleting post with ID ${id}:`, error);\r\n        res.status(500).json({\r\n            message: 'Error deleting post',\r\n            error: error.message,\r\n            stack: error.stack,\r\n        });\r\n    }\r\n});\r\n\r\n\r\n// Server setup\r\nconst port = process.env.PORT || 3000;\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"]}